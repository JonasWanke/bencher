---
import {DocsTab, DocsMenuId} from "./docs_tab";
import {Language, architecture, benchmarking, defaultLang, explanation, howTo, tutorial } from "../../i18n/ui.ts";
import {getLangCollection, langPath} from "../../i18n/utils.ts"
import { Collection } from "../../content/config";

interface Props {
  tab: DocsTab;
  lang?: undefined | string;
}

// Docs
const tutorialCollection = await getLangCollection(Collection.tutorial);
const howToCollection = await getLangCollection(Collection.how_to);
const explanationCollection = await getLangCollection(Collection.explanation);
const referenceCollection = await getLangCollection(Collection.reference);

// Learn
const rustCollection = await getLangCollection(Collection.rust);

const { tab } = Astro.props;
const lang: Language = Astro.props.lang ?? defaultLang;

const tabClass = (tab: DocsTab, current: DocsTab) => {
  const isCurrent = (tab: DocsTab, current: DocsTab) => {
    switch (tab) {
      case DocsTab.Docs:
        return current === DocsTab.Docs;
      case DocsTab.Learn:
        return current === DocsTab.Learn;
    }
  }
  return isCurrent(tab, current) ? "is-active" : "";
}
const displayStyle = (menu: DocsMenuId, tab: DocsTab) => {
  const isVisible = (menu: DocsMenuId, tab: DocsTab) => {
    switch (menu) {
      case DocsMenuId.Docs:
        return tab === DocsTab.Docs;
      case DocsMenuId.Learn:
        return tab === DocsTab.Learn;
    }
  }
  return `display: ${isVisible(menu, tab) ? "block" : "none"};`;
}
---

<aside class="menu is-sticky">
  <!-- Docs -->
  <div class="tabs is-centered">
    <ul>
      <li id={DocsTab.Docs} class={tabClass(DocsTab.Docs, tab)}><a>Docs</a></li>
      <li id={DocsTab.Learn} class={tabClass(DocsTab.Learn, tab)}><a>Learn</a></li>
    </ul>
  </div>
  <div id={DocsMenuId.Docs} style={displayStyle(DocsMenuId.Docs, tab)}>
    <p class="menu-label">{tutorial(lang)}</p>
    <ul class="menu-list">
      {
        tutorialCollection[lang]?.map((page) => (
          <li>
            <a href={`/docs/${langPath(lang)}tutorial/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">{howTo(lang)}</p>
    <ul class="menu-list">
      {
        howToCollection[lang]?.map((page) => (
          <li>
            <a href={`/docs/${langPath(lang)}how-to/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">{explanation(lang)}</p>
    <ul class="menu-list">
      {
        explanationCollection[lang]?.map((page) => (
          <li>
            <a href={`/docs/${langPath(lang)}explanation/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
    <p class="menu-label">Reference</p>
    <ul class="menu-list">
      <li>
        <a href={`/docs/${langPath(lang)}reference/api`}>REST API</a>
      </li>
      <li>
        <a href={`/docs/${langPath(lang)}reference/architecture`}>{architecture(lang)}</a>
      </li>
      {
        referenceCollection[lang]?.map((page) => (
          <li>
            <a href={`/docs/${langPath(lang)}reference/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
  </div>
  <!-- Learn -->
  <div id={DocsMenuId.Learn} style={displayStyle(DocsMenuId.Learn, tab)}>
    <p class="menu-label">{benchmarking(lang)}</p>
    <p>Rust</p>
    <ul class="menu-list">
      {
        rustCollection[lang]?.map((page) => (
          <li>
            <a href={`/learn/${langPath(lang)}benchmarking/rust/${page.slug}`}>{page.data.title}</a>
          </li>
        ))
      }
    </ul>
  </div>
</aside>
<script >
  import {DocsTab, DocsMenuId} from "./docs_tab";

  // Find all buttons with the `alert` class on the page.
  const docsTab = document.getElementById(DocsTab.Docs);
  const learnTab = document.getElementById(DocsTab.Learn);
  const docsMenu = document.getElementById(DocsMenuId.Docs);
  const learnMenu = document.getElementById(DocsMenuId.Learn);

  function setDocs() {
    docsTab?.classList.add("is-active");
    learnTab?.classList.remove("is-active");

    docsMenu ? docsMenu.style.display = "block" : null;
    learnMenu ? learnMenu.style.display = "none" : null;
  }

  function setLearn() {
    docsTab?.classList.remove("is-active");
    learnTab?.classList.add("is-active");

    docsMenu ? docsMenu.style.display = "none" : null;
    learnMenu ? learnMenu.style.display = "block" : null;
  }

  docsTab?.addEventListener("click", () => {
    setDocs();
  });
  learnTab?.addEventListener("click", () => {
    setLearn();
  });
</script>